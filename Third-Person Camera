using UnityEngine;
using UnityEngine.InputSystem;

public class ThirdPersonCamera : MonoBehaviour
{
    [Header("Target")]
    public Transform target;

    [Header("Camera Settings")]
    public Vector3 offset = new Vector3(0, 2, -5);
    public float rotationSpeed = 100f;
    public float smoothTime = 0.1f;

    [Header("Clamp Settings")]
    public float minVerticalAngle = -90f;
    public float maxVerticalAngle = 90f;

    private Vector2 lookInput;
    private float yaw;
    private float pitch;
    private Vector3 currentVelocity;

    private PlayerInputActions inputActions;

    private void Awake()
    {
        inputActions = new PlayerInputActions();
    }

    private void OnEnable()
    {
        inputActions.Camera.Enable();
        inputActions.Camera.MouseRotation.performed += OnLook;
        inputActions.Camera.MouseRotation.canceled += OnLook;
    }

    private void OnDisable()
    {
        inputActions.Camera.MouseRotation.performed -= OnLook;
        inputActions.Camera.MouseRotation.canceled -= OnLook;
        inputActions.Camera.Disable();
    }

    private void Start()
    {
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }

    private void OnLook(InputAction.CallbackContext context)
    {
        lookInput = context.ReadValue<Vector2>();
    }

    private void LateUpdate()
    {
        if (target == null) return;

        yaw += lookInput.x * rotationSpeed * Time.deltaTime;
        pitch -= lookInput.y * rotationSpeed * Time.deltaTime;
        pitch = Mathf.Clamp(pitch, minVerticalAngle, maxVerticalAngle);

        Quaternion rotation = Quaternion.Euler(pitch, yaw, 0);
        Vector3 desiredPosition = target.position + rotation * offset;
        transform.position = Vector3.SmoothDamp(transform.position, desiredPosition, ref currentVelocity, smoothTime);

        transform.LookAt(target.position + Vector3.up * 1.5f);
    }
}
